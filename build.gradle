buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://s01.oss.sonatype.org' }
        google()
        gradlePluginPortal()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
    }
    dependencies {
        classpath "io.freefair.gradle:lombok-plugin:6.5.0.3"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "edu.sc.seis.launch4j:launch4j:3.0.5"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"

    }

}


apply plugin: 'java-library'
apply plugin: 'kotlin'
apply plugin: 'io.freefair.lombok'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'kotlinx-serialization'
apply plugin: 'application'
apply plugin: 'edu.sc.seis.launch4j'

mainClassName = 'app.Launcher'

dependencies {
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1")
    implementation("org.jetbrains.kotlin:kotlin-reflect:1.8.21")
    api "games.spooky.gdx:gdx-nativefilechooser-desktop:2.3.0"
    api "games.spooky.gdx:gdx-nativefilechooser:2.3.0"
    implementation(project(":gdx-yung-utils"))
    implementation(project(":gdx-bmesh"))
    implementation(project(":gdx-gizmos"))
    implementation(project(":gdx-picking"))
    implementation(project(":gdx-scenegraph"))
    implementation(project(":gdx-mesh-plus"))
    implementation(project(":gdx-ui"))
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'org.javassist:javassist:3.29.2-GA'
    implementation "io.github.libktx:ktx-inject:$ktxVersion"
    implementation 'io.github.libktx:ktx-collections:1.12.0-rc1'
    implementation 'io.github.libktx:ktx-graphics:1.12.0-rc1'
    implementation 'io.github.libktx:ktx-script:1.12.0-rc1'
    implementation 'io.github.libktx:ktx-scene2d:1.12.0-rc1'
    implementation 'io.github.libktx:ktx-ashley:1.12.0-rc1'
    implementation 'io.github.libktx:ktx-app:1.12.0-rc1'
    implementation 'io.github.libktx:ktx-assets:1.12.0-rc1'
    implementation 'io.github.libktx:ktx-async:1.12.0-rc1'
    implementation 'io.github.libktx:ktx-json:1.12.0-rc1'
    implementation 'io.github.libktx:ktx-math:1.12.0-rc1'
    implementation 'io.github.libktx:ktx-style:1.12.0-rc1'
    implementation 'io.github.libktx:ktx-vis:1.12.0-rc1'
    implementation 'io.github.libktx:ktx-actors:1.12.0-rc1'
    implementation 'io.github.libktx:ktx-vis:1.12.0-rc1'
    implementation 'io.github.libktx:ktx-assets-async:1.12.0-rc1'
    implementation 'com.github.czyzby:gdx-kiwi:1.9.1.9.6'
    implementation('io.reactivex.rxjava3:rxkotlin:3.0.1')
    implementation 'com.crashinvaders.vfx:gdx-vfx-core:0.5.1'
    implementation 'com.crashinvaders.vfx:gdx-vfx-effects:0.5.1'
}


sourceCompatibility = 11
compileJava {
    options.incremental = true
}
compileKotlin {
    compilerOptions.jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_11)
}

kotlin {
    jvmToolchain(11)
}

version = '1.0.0'
ext.appName = 'salient'
repositories {
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org' }
    // You may want to remove the following line if you have errors downloading dependencies.
    gradlePluginPortal()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://teavm.org/maven/repository/' }
    maven {

        url "https://repo.yunghegel.org/snapshots"
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        kotlin {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['assets']
        }
    }
    test {
        java {
            srcDirs = ['test']
        }
        kotlin {
            srcDirs = ['test']
        }
        resources {
            srcDirs = ['res']
        }
    }
}


jar {

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Main-Class': 'app.Launcher'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

}

launch4j {
    outfile = 'Salient.exe'
    mainClassName = 'app.Launcher'
    copyConfigurable = []
    icon = "${projectDir}/assets/icon.ico"
    jarTask = project.tasks.jar

}

tasks.register('copyAssets',Copy) {
    from 'assets'
    into 'dist'
}

tasks.register('copyExe',Copy) {
    from 'build/launch4j'
    into 'dist'
}








